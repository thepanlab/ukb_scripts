{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from tqdm import tqdm\n",
    "import multiprocessing\n",
    "from multiprocessing import Pool\n",
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "##Non_cancer\n",
    "non_cancer=pd.read_csv('/work/biobank/ukb_data/UKB_coding_mapping_table.tsv',sep=\"\\t\")#.to_csv(\"/work/biobank/ukb_data/good.tsv\",sep=\"\\t\",index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "##cancer\n",
    "cancer=pd.read_csv('/work/biobank/ukb_data/self_report_ICD10_mapping_treeRespect.tsv',sep=\"\\t\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "##Medications\n",
    "medication_codes=pd.read_csv(\"/work/biobank/ukb_data/medication_coding.tsv\",sep=\"\\t\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "cancer_columns=[\"40006-\"+str(y)+\".0\"  for y in range(13)]+[\"20001-\"+str(x)+\".\"+str(y) for x in range(4) for y in range(6)]\n",
    "non_cancer_columns=[\"20002-\"+str(x)+\".\"+str(y) for x in range(4) for y in range(33)]+[\"41202-0.\"+str(y)  for y in range(66)]\n",
    "#medications=[\"20003-\"+str(x)+\".\"+str(y) for x in range(4) for y in range(48)]\n",
    "phenos_cancer=pd.read_csv(\"/work/biobank/ukb_data/new_data/ukb49767.csv\",usecols=[\"eid\"]+cancer_columns,low_memory=False)\n",
    "phenos_non_cancer=pd.read_csv(\"/work/biobank/ukb_data/new_data/ukb49767.csv\",usecols=[\"eid\"]+non_cancer_columns,low_memory=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "phenos_cancer=phenos_cancer.set_index(\"eid\")\n",
    "phenos_non_cancer=phenos_non_cancer.set_index(\"eid\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def initializer(ii):\n",
    "    global illness_ids\n",
    "    illness_ids=ii\n",
    "\n",
    "def fetch_individuals(phenos_cancer_splitted):\n",
    "    result=[]\n",
    "    count=0\n",
    "    number_done=1\n",
    "    global illness_ids\n",
    "    assert illness_ids is not None\n",
    "    for eid in phenos_cancer_splitted.index.values:\n",
    "        for code in illness_ids:\n",
    "            found=int(code in list(phenos_cancer_splitted.loc[eid,:].values))\n",
    "            try:\n",
    "                found2=int(float(code) in list(phenos_cancer_splitted.loc[eid,:] ))\n",
    "            except:\n",
    "                found2=0\n",
    "            if found==1 or found2==1:\n",
    "                break\n",
    "        if found2==1:\n",
    "            result.append(found2)\n",
    "        else:\n",
    "            result.append(found)\n",
    "\n",
    "        number_done+=1\n",
    "    del illness_ids\n",
    "    return result\n",
    "\n",
    "#return the process result\n",
    "def process_frame_pheno(phenos_splitted):\n",
    "    return fetch_individuals(phenos_splitted) \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def retrieval_non_cancer(non_cancer_info,phenos_non_cancer):\n",
    "    num_cores = multiprocessing.cpu_count()-1  #number of cpus\n",
    "    num_partitions = num_cores #number of partitions to split dataframe\n",
    "    df_split = np.array_split(phenos_non_cancer, num_cores) #split array --> scatter\n",
    "    total_results=[]\n",
    "    names=[]\n",
    "    for i in non_cancer_info.index.values:\n",
    "        vals_int=non_cancer_info.loc[i,\"UKB_coding6\"]\n",
    "        vals=non_cancer_info.loc[i,\"UKB_coding19\"]\n",
    "        name=non_cancer_info.loc[i,\"GBE_short_name\"]\n",
    "        print(name)\n",
    "        ii=[vals_int]\n",
    "        try:\n",
    "            ii+=vals.split(',')\n",
    "        except:\n",
    "            pass\n",
    "        print(ii) \n",
    "        pool = Pool(processes=num_cores,initializer=initializer,initargs=[ii,])\n",
    "        print(\"start\")\n",
    "        result = pool.map(process_frame_pheno, df_split)# broadcast run process and gather\n",
    "        # concat the final results in on array\n",
    "        final=[]\n",
    "        count=0\n",
    "        for i in result:\n",
    "            final+=i\n",
    "            for k in i:\n",
    "                if k==1:\n",
    "                    count+=1\n",
    "        total_results.append(final)\n",
    "        names.append(name)\n",
    "        print(\"count:\"+str(count))\n",
    "        pool.close()\n",
    "        pool.join()\n",
    "        del pool\n",
    "    return total_results,names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def retrieval_cancer(cancer_info,phenos_cancer):\n",
    "    num_cores = multiprocessing.cpu_count()-1  #number of cpus\n",
    "    num_partitions = num_cores #number of partitions to split dataframe\n",
    "    df_split = np.array_split(phenos_cancer, num_cores) #split array --> scatter\n",
    "    total_results=[]\n",
    "    names=[]\n",
    "    for i in cancer_info.index.values:\n",
    "        vals_int=cancer.loc[i,\"self-reported coding\"]\n",
    "        vals=cancer.loc[i,\"ICD-10 Codes\"]\n",
    "        name=cancer.loc[i,\"meaning\"]\n",
    "        print(name)\n",
    "        ii=[num+\".0\" for num  in vals_int.split(',')]+vals.split(',')\n",
    "        print(ii) \n",
    "        pool = Pool(processes=num_cores,initializer=initializer,initargs=[ii,])\n",
    "        print(\"start\")\n",
    "        result = pool.map(process_frame_pheno, df_split)# broadcast run process and gather\n",
    "        # concat the final results in on array\n",
    "        final=[]\n",
    "        count=0\n",
    "        for i in result:\n",
    "            final+=i\n",
    "            for k in i:\n",
    "                if k==1:\n",
    "                    count+=1\n",
    "        total_results.append(final)\n",
    "        names.append(name)\n",
    "        print(\"count:\"+str(count))\n",
    "        pool.close()\n",
    "        pool.join()\n",
    "        del pool\n",
    "    return total_results,names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "total_results_cancer,names_cancer=retrieval_cancer(cancer,phenos_cancer)\n",
    "total_results_non_cancer,names_non_cancer=retrieval_non_cancer(non_cancer,phenos_non_cancer)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "pd.DataFrame(np.array(total_results).T,columns=names,index=phenos_cancer.index.values).to_csv(\"/work/biobank/ukb_data/new_data/cancer_pheno.csv\")\n",
    "pd.DataFrame(np.array(total_results).T,columns=names,index=phenos_non_cancer.index.values).to_csv(\"/work/biobank/ukb_data/new_data/non_cancer_pheno.csv\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
